) +
theme_void() +
theme(panel.background = element_rect("steelblue"),
plot.title = element_text(margin = margin(5, 0, 5, 0)))
japan <- rnaturalearth::ne_countries(
scale = 10,
country = "Japan",
returnclass = "sf"
)
install.packages("rnaturalearth")
library(ggplot2)
city_names <- c(
"Tokyo (東京/도쿄)",
"Yokohama (横浜/요코하마)",
"Osaka (大阪市/오사카)",
"Nagoya (名古屋市/나고야)",
"Sapporo (札幌市/사포르)",
"Kobe (神戸市/고베)",
"Kyoto (京都市/교토)",
"Fukuoka (福岡市/후쿠시마)",
"Kawasaki (川崎市/가와사키)",
"Saitama (さいたま市/사이타마)"
)
main_cities <- data.frame(
name = city_names,
lat = c(35.690, 35.444, 34.694, 35.183, 43.067,
34.69, 35.012, 33.583, 35.517, 35.861),
lon = c(139.692, 139.638, 135.502, 136.9, 141.35,
135.196, 135.768, 130.4, 139.7, 139.646)
)
japan <- rnaturalearth::ne_countries(
scale = 10,
country = "Japan",
returnclass = "sf"
)
japan <- rnaturalearth::ne_countries(
scale = 10,
country = "Japan",
returnclass = "sf"
)
install.packages("rnaturalearthhires", repos = "http://packages.ropensci.org", type = "source")
japan <- rnaturalearth::ne_countries(
scale = 10,
country = "Japan",
returnclass = "sf"
)
.libPaths()
japan <- rnaturalearth::ne_countries(
scale = 10,
country = "Japan",
returnclass = "sf"
)
install.packages("rnaturalearthhires")
devtools::install_github("ropensci/rnaturalearthhires")
japan <- rnaturalearth::ne_countries(
scale = 10,
country = "Japan",
returnclass = "sf"
)
library(ggplot2)
city_names <- c(
"Tokyo (東京/도쿄)",
"Yokohama (横浜/요코하마)",
"Osaka (大阪市/오사카)",
"Nagoya (名古屋市/나고야)",
"Sapporo (札幌市/사포르)",
"Kobe (神戸市/고베)",
"Kyoto (京都市/교토)",
"Fukuoka (福岡市/후쿠시마)",
"Kawasaki (川崎市/가와사키)",
"Saitama (さいたま市/사이타마)"
)
main_cities <- data.frame(
name = city_names,
lat = c(35.690, 35.444, 34.694, 35.183, 43.067,
34.69, 35.012, 33.583, 35.517, 35.861),
lon = c(139.692, 139.638, 135.502, 136.9, 141.35,
135.196, 135.768, 130.4, 139.7, 139.646)
)
japan <- rnaturalearth::ne_countries(
scale = 10,
country = "Japan",
returnclass = "sf"
)
ggplot() +
geom_sf(
data = japan,
fill = "forestgreen",
colour = "grey10",
size = 0.2
) +
ggrepel::geom_label_repel(
aes(lon, lat, label = name),
data = main_cities,
fill = "#FFFFFF88",
box.padding = unit(5, "mm")
) +
geom_point(aes(lon, lat), main_cities) +
ggtitle(
"Location of largest cities in Japan (日本) 🇯🇵"
) +
theme_void() +
theme(panel.background = element_rect("steelblue"),
plot.title = element_text(margin = margin(5, 0, 5, 0)))
ggplot() +
geom_sf(
data = japan,
fill = "forestgreen",
colour = "grey10",
size = 0.2
) +
ggrepel::geom_label_repel(
aes(lon, lat, label = name),
data = main_cities,
fill = "#FFFFFF88",
box.padding = unit(5, "mm"),
family = "Arial"
) +
geom_point(aes(lon, lat), main_cities) +
ggtitle(
"Location of largest cities in Japan (日本) 🇯🇵"
) +
theme_void() +
theme(panel.background = element_rect("steelblue"),
plot.title = element_text(margin = margin(5, 0, 5, 0)))
ggplot() +
geom_sf(
data = japan,
fill = "forestgreen",
colour = "grey10",
size = 0.2
) +
ggrepel::geom_label_repel(
aes(lon, lat, label = name),
data = main_cities,
fill = "#FFFFFF88",
box.padding = unit(5, "mm"),
family = "NanumGothic"
) +
geom_point(aes(lon, lat), main_cities) +
ggtitle(
"Location of largest cities in Japan (日本) 🇯🇵"
) +
theme_void() +
theme(panel.background = element_rect("steelblue"),
plot.title = element_text(margin = margin(5, 0, 5, 0)))
ggplot() +
geom_sf(
data = japan,
fill = "forestgreen",
colour = "grey10",
size = 0.2
) +
ggrepel::geom_label_repel(
aes(lon, lat, label = name),
data = main_cities,
fill = "#FFFFFF88",
box.padding = unit(5, "mm"),
family = "NanumGothic"
) +
geom_point(aes(lon, lat), main_cities) +
ggtitle(
"Location of largest cities in Japan (日本) 🇯🇵",
family = "NanumGothic"
) +
theme_void() +
theme(panel.background = element_rect("steelblue"),
plot.title = element_text(margin = margin(5, 0, 5, 0)))
ggplot() +
geom_sf(
data = japan,
fill = "forestgreen",
colour = "grey10",
size = 0.2
) +
ggrepel::geom_label_repel(
aes(lon, lat, label = name),
data = main_cities,
fill = "#FFFFFF88",
box.padding = unit(5, "mm"),
family = "NanumGothic"
) +
geom_point(aes(lon, lat), main_cities) +
ggtitle(
"Location of largest cities in Japan (日本) 🇯🇵"
) +
theme_void(family = "NanumGothic") +
theme(panel.background = element_rect("steelblue"),
plot.title = element_text(margin = margin(5, 0, 5, 0)))
ggplot() +
geom_sf(
data = japan,
fill = "forestgreen",
colour = "grey10",
size = 0.2
) +
ggrepel::geom_label_repel(
aes(lon, lat, label = name),
data = main_cities,
fill = "#FFFFFF88",
box.padding = unit(5, "mm"),
family = "NanumGothic"
) +
geom_point(aes(lon, lat), main_cities) +
ggtitle(
"Location of largest cities in Japan (日本) 🇯🇵"
) +
theme_void(base_family = "NanumGothic") +
theme(panel.background = element_rect("steelblue"),
plot.title = element_text(margin = margin(5, 0, 5, 0)))
=======
labs(x="", y="경제성장률", title = "코로나19 위기 속 주요국가 경제성장률",
subtitle = "2015년부터 2020년 경제성장률(단위: %)",
color = "") +
geom_label_repel(aes(label = label),
nudge_x = 0.5,
na.rm = TRUE,
family = "NanumGothic") +
theme_minimal(base_family = "NanumGothic") +
theme(legend.position = "none") +
scale_color_manual(values = c("gray75", "blue", "red")) +
scale_x_continuous(limits = c(2015,2021)) +
geom_hline(yintercept = 0, linetype = 3, color = "gray37")
ggsave("fig/covid19-growth.png")
deaths_tbl %>%
ggplot(aes(x = as.integer(month), y=사망자, group = year, color = is_2020)) +
geom_line() +
facet_wrap(~국가명, scales = "fixed") +
scale_x_continuous(limits = c(1,12), breaks = c(2,4,6,8,10)) +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = c("gray50", "red")) +
theme_minimal(base_family = "NanumGothic") +
labs(x="", y="사망자", title = "코로나19로 인한 주요국가 월별 사망자수 비교",
subtitle = "2015년부터 2020년 월별 사망자수",
color = "") +
theme(legend.position = "top")
deaths_tbl %>%
ggplot(aes(x = as.integer(month), y=사망자, group = year, color = is_2020)) +
geom_line() +
facet_wrap(~국가명, scales = "free_y") +
scale_x_continuous(limits = c(1,12), breaks = c(2,4,6,8,10)) +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = c("gray50", "red")) +
theme_minimal(base_family = "NanumGothic") +
labs(x="", y="사망자", title = "코로나19로 인한 주요국가 월별 사망자수 비교",
subtitle = "2015년부터 2020년 월별 사망자수",
color = "") +
theme(legend.position = "top")
ggsave("fig/covid19-deaths.png")
remotes::install_github("eshom/covid-age-data")
inputDB <- download_covid("inputDB", progress = FALSE)
# remotes::install_github("eshom/covid-age-data")
library(covidAgeData)
inputDB <- download_covid("inputDB", progress = FALSE)
subset_covid(inputDB, Country = "South Korea", Region = "All") %>%
head()
library(tidyverse)
subset_covid(inputDB, Country = "South Korea", Region = "All") %>%
head()
korea_tbl <- subset_covid(inputDB, Country = "South Korea", Region = "All")
korea_tbl
korea_tbl <- subset_covid(inputDB, Country = "South Korea", Region = "All") %>%
as_tibble()
korea_tbl
korea_tbl %>%
janitor::clean_names(.)
korea_tbl %>%
janitor::clean_names(.) %>%
mutate(date = dmy(date))
library(lubridate)
korea_tbl %>%
janitor::clean_names(.) %>%
mutate(date = dmy(date))
korea_tbl %>%
janitor::clean_names(.) %>%
mutate(date = dmy(date)) %>%
glimpse
korea_tbl %>%
janitor::clean_names(.) %>%
mutate(date = dmy(date)) %>%
skimr::skim
korea_tbl %>%
janitor::clean_names(.) %>%
mutate(date = dmy(date)) %>%
skimr::skim(.)
>>>>>>> ba910147c4b51aa74f2743469cbe81069268b48b
library(tidyverse)
library(countrycode)
library(extrafont)
loadfonts()
vaccine <- read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv",
col_types= "ccDddddddddd")
vaccine_tbl <- vaccine %>%
mutate(ISO2 = countrycode(iso_code,
origin = 'iso3c',
destination = 'iso2c')) %>%
select(location,
ISO2,
date,
total_vaccinations,
people_vaccinated,
people_fully_vaccinated,
daily_vaccinations_raw) %>%
# filter(str_detect(ISO2, "KR|JP|US|GB")) %>%
filter(str_detect(ISO2, "KR|JP|TW|GB|US")) %>%
group_by(ISO2) %>%
arrange(date) %>%
mutate(total_vaccinations = zoo::na.locf(total_vaccinations)) %>%
mutate(country  = case_when(str_detect(location, "Korea") ~ "한국",
str_detect(location, "Japan") ~ "일본",
str_detect(location, "Taiwan") ~ "대만"))
vaccine_tbl %>%
reactable::reactable()
vaccine <- read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv",
col_types= "ccDddddddddd")
vaccine <- read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv",
col_types= "ccDddddddddd")
download.file(url = "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv",
destfile = "data/vaccinations.csv")
vaccine <- read_csv("data/vaccinations.csv",
col_types= "ccDddddddddd")
vaccine_tbl <- vaccine %>%
mutate(ISO2 = countrycode(iso_code,
origin = 'iso3c',
destination = 'iso2c')) %>%
select(location,
ISO2,
date,
total_vaccinations,
people_vaccinated,
people_fully_vaccinated,
daily_vaccinations_raw) %>%
# filter(str_detect(ISO2, "KR|JP|US|GB")) %>%
filter(str_detect(ISO2, "KR|JP|TW|GB|US")) %>%
group_by(ISO2) %>%
arrange(date) %>%
mutate(total_vaccinations = zoo::na.locf(total_vaccinations)) %>%
mutate(country  = case_when(str_detect(location, "Korea") ~ "한국",
str_detect(location, "Japan") ~ "일본",
str_detect(location, "Taiwan") ~ "대만"))
vaccine_tbl %>%
reactable::reactable()
vaccine_tbl
vaccine_tbl %>%
count(ISO2)
library(tidyverse)
library(countrycode)
library(extrafont)
loadfonts()
download.file(url = "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv",
destfile = "data/vaccinations.csv")
vaccine <- read_csv("data/vaccinations.csv",
col_types= "ccDddddddddd")
vaccine_tbl <- vaccine %>%
mutate(ISO2 = countrycode(iso_code,
origin = 'iso3c',
destination = 'iso2c')) %>%
select(location,
ISO2,
date,
total_vaccinations,
people_vaccinated,
people_fully_vaccinated,
daily_vaccinations_raw) %>%
# filter(str_detect(ISO2, "KR|JP|US|GB")) %>%
filter(str_detect(ISO2, "KR|JP|TW|GB|US")) %>%
group_by(ISO2) %>%
arrange(date) %>%
mutate(total_vaccinations = zoo::na.locf(total_vaccinations)) %>%
mutate(country  = case_when(str_detect(location, "Korea") ~ "한국",
str_detect(location, "Japan") ~ "일본",
str_detect(location, "Taiwan") ~ "대만"))
vaccine_tbl %>%
count(ISO2)
vaccine_tbl %>%
reactable::reactable()
vaccine_tbl %>%
count(country)
vaccine_tbl <- vaccine %>%
mutate(ISO2 = countrycode(iso_code,
origin = 'iso3c',
destination = 'iso2c')) %>%
select(location,
ISO2,
date,
total_vaccinations,
people_vaccinated,
people_fully_vaccinated,
daily_vaccinations_raw) %>%
# filter(str_detect(ISO2, "KR|JP|US|GB")) %>%
filter(str_detect(ISO2, "KR|JP|TW|GB|US")) %>%
group_by(ISO2) %>%
arrange(date) %>%
mutate(total_vaccinations = zoo::na.locf(total_vaccinations)) %>%
mutate(country  = case_when(str_detect(location, "Korea") ~ "한국",
str_detect(location, "United States") ~ "미국",
str_detect(location, "United Kingdom") ~ "영국",
str_detect(location, "Japan") ~ "일본",
str_detect(location, "Taiwan") ~ "대만"))
vaccine_tbl %>%
count(country)
vaccine_tbl <- vaccine %>%
mutate(ISO2 = countrycode(iso_code,
origin = 'iso3c',
destination = 'iso2c')) %>%
select(location,
ISO2,
date,
total_vaccinations,
people_vaccinated,
people_fully_vaccinated,
daily_vaccinations_raw) %>%
# filter(str_detect(ISO2, "KR|JP|US|GB")) %>%
filter(str_detect(ISO2, "KR|JP|TW|GB|US")) %>%
group_by(ISO2) %>%
arrange(date) %>%
mutate(total_vaccinations = zoo::na.locf(total_vaccinations)) %>%
mutate(country  = case_when(str_detect(location, "Korea") ~ "한국",
str_detect(location, "United States") ~ "미국",
str_detect(location, "United Kingdom") ~ "영국",
str_detect(location, "Japan") ~ "일본",
str_detect(location, "Taiwan") ~ "대만")) %>%
select(country, ISO2, location, vaccinations = total_vaccinations)
vaccine_tbl %>%
reactable::reactable()
vaccine_tbl <- vaccine %>%
mutate(ISO2 = countrycode(iso_code,
origin = 'iso3c',
destination = 'iso2c')) %>%
select(location,
ISO2,
date,
total_vaccinations,
people_vaccinated,
people_fully_vaccinated,
daily_vaccinations_raw) %>%
# filter(str_detect(ISO2, "KR|JP|US|GB")) %>%
filter(str_detect(ISO2, "KR|JP|TW|GB|US")) %>%
group_by(ISO2) %>%
arrange(date) %>%
mutate(total_vaccinations = zoo::na.locf(total_vaccinations)) %>%
mutate(country  = case_when(str_detect(location, "Korea") ~ "한국",
str_detect(location, "United States") ~ "미국",
str_detect(location, "United Kingdom") ~ "영국",
str_detect(location, "Japan") ~ "일본",
str_detect(location, "Taiwan") ~ "대만")) %>%
select(date, country, ISO2, location, vaccinations = total_vaccinations)
vaccine_tbl %>%
reactable::reactable()
vaccine_tbl <- vaccine %>%
mutate(ISO2 = countrycode(iso_code,
origin = 'iso3c',
destination = 'iso2c')) %>%
select(location,
ISO2,
date,
total_vaccinations,
people_vaccinated,
people_fully_vaccinated,
daily_vaccinations_raw) %>%
# filter(str_detect(ISO2, "KR|JP|US|GB")) %>%
filter(str_detect(ISO2, "KR|JP|TW|GB|US")) %>%
group_by(ISO2) %>%
arrange(date) %>%
mutate(total_vaccinations = zoo::na.locf(total_vaccinations)) %>%
mutate(country  = case_when(str_detect(location, "Korea") ~ "한국",
str_detect(location, "United States") ~ "미국",
str_detect(location, "United Kingdom") ~ "영국",
str_detect(location, "Japan") ~ "일본",
str_detect(location, "Taiwan") ~ "대만")) %>%
select(date, country, ISO2, location, vaccinations = total_vaccinations) %>%
group_by(country) %>%
arrange(date) %>%
ungroup()
vaccine_tbl %>%
reactable::reactable()
vaccine_tbl
vaccine_tbl <- vaccine %>%
mutate(ISO2 = countrycode(iso_code,
origin = 'iso3c',
destination = 'iso2c')) %>%
select(location,
ISO2,
date,
total_vaccinations,
people_vaccinated,
people_fully_vaccinated,
daily_vaccinations_raw) %>%
# filter(str_detect(ISO2, "KR|JP|US|GB")) %>%
filter(str_detect(ISO2, "KR|JP|TW|GB|US")) %>%
group_by(ISO2) %>%
arrange(date) %>%
mutate(total_vaccinations = zoo::na.locf(total_vaccinations)) %>%
mutate(country  = case_when(str_detect(location, "Korea") ~ "한국",
str_detect(location, "United States") ~ "미국",
str_detect(location, "United Kingdom") ~ "영국",
str_detect(location, "Japan") ~ "일본",
str_detect(location, "Taiwan") ~ "대만")) %>%
select(date, country, ISO2, location, vaccinations = total_vaccinations) %>%
group_by(country) %>%
arrange(date) %>%
ungroup()
vaccine_tbl %>%
reactable::reactable()
# remotes::install_github("eshom/covid-age-data")
library(covidAgeData)
remotes::install_github("eshom/covid-age-data")
remotes::install_github("eshom/covid-age-data")
remotes::install_github("eshom/covid-age-data")
install.packages("rlang")
remotes::install_github("eshom/covid-age-data")
.libPaths()
